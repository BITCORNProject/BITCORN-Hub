<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8">

    <title>Overlay Index</title>
    <link rel="stylesheet" href="//code.jquery.com/ui/1.12.1/themes/base/jquery-ui.css">

    <style>
        :root {
            --item-container-bg: rgb(255, 255, 255);
            --display-control-panels-bg: rgb(255, 255, 255);
            --selectable-menu-container-bg: rgb(255, 255, 255);

            --ol-ul-list-bg: rgb(167, 167, 167);
            --li-list-bg: rgb(131, 131, 131);
            --selectable-menu-ui-selecting-bg: rgb(78, 78, 78);
            --selectable-menu-ui-selected-bg: rgb(148, 148, 148);
            --selectable-menu-ui-selected-color: rgb(49, 49, 49);
            /*--selectable-menu-li-bg: rgb(146, 146, 146);
            --selectable-menu-li-color: rgb(235, 233, 233);*/
        }

        .theme1 {
            --item-container-bg: rgb(160, 160, 160);
            --display-control-panels-bg: rgb(85, 85, 85);
            --selectable-menu-container-bg: rgb(75, 75, 75);
        }

        .theme2 {
            --item-container-bg: rgb(142, 108, 155);
            --display-control-panels-bg: rgb(199, 199, 129);
            --selectable-menu-container-bg: rgb(177, 143, 180);
        }

        .theme3 {
            --item-container-bg: rgb(235, 235, 235);
            --display-control-panels-bg: rgb(235, 235, 235);
            --selectable-menu-container-bg: rgb(255, 255, 255);
        }

        html,
        body {
            width: 100%;
            height: 100%;
            margin: 0;
            padding: 0;
            background-color: var(--body-color);
        }

        .clickable {
            cursor: pointer;
        }

        .item-container {
            display: flex;
            flex-direction: row;
            width: 100%;
            background-color: var(--item-container-bg);
        }

        .item-label {
            text-align: right;
            width: 200px;
            padding-right: 5px;
        }

        .item-input {
            text-align: left;
            width: 50%;
        }

        ul,
        ol {
            list-style-type: none;
            background-color: var(--ol-ul-list-bg);
            padding: 5px;
        }

        li {
            background-color: var(--li-list-bg);
            padding: 5px;
        }

        #display-control-panels {
            background-color: var(--display-control-panels-bg);
        }

        #selectable-menu-container {
            background-color: var(--selectable-menu-container-bg);
        }

        #selectable-menu .ui-selecting {
            background: var(--selectable-menu-ui-selecting-bg);
        }

        #selectable-menu .ui-selected {
            background: var(--selectable-menu-ui-selected-bg);
            color: var(--selectable-menu-ui-selected-color);
        }

        #selectable-menu {
            list-style-type: none;
            margin: 0;
            padding: 0;
            width: 100%;
        }

        #selectable-menu li {
            margin: 3px;
            padding: 0.4em;
            /*background: var(--selectable-menu-li-bg);
            color: var(--selectable-menu-li-color);*/
        }

        .notice {
            background-color: rgb(148, 148, 148);
            color: rgb(226, 0, 0);
            padding: 2px;
            font-size: 90%;
            text-align: right;
        }
    </style>
</head>

<body>
    <div style="display: flex; flex-direction: column; height: 100%">
        <div style="width: 100%;">

            <div id="login-buttons-container">
                <input id="login-youtube" type="button" value="YouTube" disabled />
            </div>
        </div>
        <div style="display: flex; flex: 2">
            <div id="selectable-menu-container" style="min-width: 150px;width: 150px;">

                <ol id="selectable-menu">
                    <li id="control-dashboard" class="ui-widget-content">Dashboard</li>
                    <li id="control-commands" class="ui-widget-content">Commands</li>
                    <li id="control-subscription" class="ui-widget-content">Subscriptions</li>
                    <li id="control-settings" class="ui-widget-content">Settings</li>
                </ol>
            </div>
            <div id="display-control-panels" style="flex: auto; overflow: auto;">
                <div style="display: flex; flex-direction: column; height: 100%">
                    <div id="display-control-dashboard">
                        <div><span>Dashboard</span>
                            <input id="control-dashboard-login-kraken" type="button" value="Login Kraken" />
                            <input id="control-dashboard-login-helix" type="button" value="Login Helix" />
                        </div>
                        <div style="display: flex; flex: 2;">
                            <div>
                                <div><img id="control-dashboard-profile_image_url" src=""
                                        style="width: 98px; height: 98px;" /></div>
                                <div><img id="control-dashboard-box_art_url" src="" style="width: 78px; height: 98px"
                                        ; /></div>
                            </div>
                            <div style="width: 100%;">
                                <div id="control-dashboard-title" class="item-container">
                                    <label class="item-label">TITLE</label>
                                    <input class="item-input" type="text" value="title" name="title" />
                                </div>
                                <div id="control-dashboard-game_name" class="item-container">
                                    <label class="item-label">GAME_NAME</label>
                                    <input class="item-input" type="text" value="game_name" name="game_name" />
                                </div>
                            </div>
                        </div>
                    </div>
                    <div id="display-control-commands" style="display: flex; flex-direction: column; height: 100%">
                        <div style="display: flex; flex: 2">
                            <div>
                                <ul style="height: 400px; width: 150px; overflow: auto;">

                                </ul>
                            </div>
                            <div style="flex: auto; overflow: auto;">

                                <form id="control-commands-form">
                                    <div>Commands</div>
                                    <div>
                                        <div id="control-commands-prefix" class="item-container">
                                            <label class="item-label">PREFIX</label>
                                            <input class="item-input" type="text" value="!" name="prefix" readonly
                                                style="font-weight: bolder; background-color:lightyellow;" />
                                        </div>
                                        <div id="control-commands-name" class="item-container">
                                            <label class="item-label">NAME</label>
                                            <input class="item-input" type="text" value="command-name" name="name"
                                                readonly style="font-weight: bolder; background-color:lightyellow;" />
                                        </div>

                                        <div id="control-commands-accessLevel" class="item-container">
                                            <label class="item-label">ACCESS_LEVEL</label>
                                            <select id="control-commands-accessLevel-select" name="accessLevel">
                                                <option value="NONE">NONE</option>
                                                <option value="CHAT">CHAT</option>
                                                <option value="FOLLOWER">FOLLOWER</option>
                                                <option value="OWNER">OWNER</option>
                                            </select>
                                        </div>

                                        <div id="control-commands-cooldown" class="item-container">
                                            <label class="item-label">COOLDOWN</label>
                                            <input class="item-input" type="number" value="30000" name="cooldown" />
                                        </div>

                                        <div id="control-commands-global_cooldown" class="item-container">
                                            <label class="item-label">GLOBAL_COOLDOWN</label>
                                            <input type="checkbox" value="true"
                                                name="global_cooldown" />
                                        </div>

                                        <div id="control-commands-description" class="item-container">
                                            <label class="item-label">DESCRIPTION</label>
                                            <input class="item-input" type="text" value="no description here"
                                                name="description" />
                                        </div>
                                        <div id="control-commands-example" class="item-container">
                                            <label class="item-label">EXAMPLE</label>
                                            <input class="item-input" type="text" value="!commands-example"
                                                name="example" />
                                        </div>
                                    </div>
                                    <div><input id="control-commands-save-button" type="submit" value="Save" /></div>
                                </form>
                            </div>
                        </div>
                    </div>
                    <div id="display-control-subscription" style="display: flex; flex-direction: column; height: 100%">
                        <div>
                            <span>Subscription</span>
                            <input id="control-subscription-login-kraken" type="button" value="Login Kraken" />
                        </div>
                        <div id="control-subscription-list-container" style="height: 500px; overflow: auto;">
                            <ul id="control-subscription-list">

                            </ul>
                        </div>
                        <div id="control-subscription-inputs-container"
                            style="display: flex; position: absolute; top: 550px;">
                            <div style="display: flex; padding: 2px;">
                                <select id="control-subscription-select" style="width: 150px;">
                                    <option value="5">5 Subscriber List</option>
                                    <option value="10">10 Subscriber List</option>
                                    <option value="25">25 Subscriber List</option>
                                    <option value="50">50 Subscriber List</option>
                                    <option value="100">100 Subscriber List</option>
                                </select>
                            </div>
                            <div style="display: flex; padding: 2px;">
                                <input id="control-subscription-previous-button" type="button" value="Previous"
                                    style="width: 80px;" />
                            </div>
                            <div style="display: flex; padding: 2px;">
                                <input id="control-subscription-next-button" type="button" value="Next"
                                    style="width: 80px;" />
                            </div>
                            <div style="display: flex; padding: 2px;">
                                <p>Showing <span id="control-subscription-index">0</span> of <span
                                        id="control-subscription-total">0</span> pages</p>
                            </div>
                        </div>
                    </div>
                    <div id="display-control-settings">

                        <div style="width: 100%;">

                            <div id="settings-header-buttons-container">
                                <input id="show-all-passwords" type="button" value="* Show All Passwords"
                                    style="color: red; background-color: yellow;" />
                            </div>
                        </div>

                        <div id="tabs-control-settings">
                            <ul>
                                <li><a href="#tabs-control-settings-1">Auth</a></li>
                                <li><a href="#tabs-control-settings-2">Server</a></li>
                                <li><a href="#tabs-control-settings-3">Database</a></li>
                                <li><a href="#tabs-control-settings-4">Access</a></li>
                                <li><a href="#tabs-control-settings-5">...New</a></li>
                            </ul>

                            <div id="tabs-control-settings-1">
                                <form id="control-settings-auth-form">
                                    <div>
                                        <div>Auth Settings</div>
                                        <div class="notice">Changes to these settings will require a server restart.
                                        </div>
                                    </div>
                                    <div id="control-settings-auth-inputs">

                                        <div id="control-settings-auth-port" class="item-container"><label
                                                class="item-label">PORT</label><input class="item-input" type="text"
                                                value="1337" name="PORT" />
                                        </div>
                                        <div id="control-settings-auth-channel-name" class="item-container"><label
                                                class="item-label">CHANNEL_NAME</label><input class="item-input"
                                                type="text" value="naivebot" name="CHANNEL_NAME" />
                                        </div>

                                        <div id="control-settings-auth-bot-username" class="item-container"><label
                                                class="item-label">BOT_USERNAME</label><input class="item-input"
                                                type="text" value="naivebot" name="BOT_USERNAME" /></div>

                                        <div id="control-settings-auth-oauth-token" class="item-container"><label
                                                class="item-label">OAUTH_TOKEN</label><input class="item-input"
                                                type="password" value="" placeholder="IRC Bot Token"
                                                name="OAUTH_TOKEN" />
                                        </div>

                                        <div id="control-settings-auth-kraken-client-id" class="item-container"><label
                                                class="item-label">KRAKEN_CLIENT_ID</label><input class="item-input"
                                                type="password" value="" placeholder="Twitch V5 Client ID"
                                                name="KRAKEN_CLIENT_ID" />
                                        </div>

                                        <div id="control-settings-auth-kraken-secret" class="item-container"><label
                                                class="item-label">KRAKEN_SECRET</label><input class="item-input"
                                                type="password" value="lkjlklfvb9085klmndf9d78b908590ojkl"
                                                name="KRAKEN_SECRET" />
                                        </div>

                                        <div id="control-settings-auth-kraken-callback-url" class="item-container">
                                            <label class="item-label">KRAKEN_CALLBACK_URL</label><input
                                                class="item-input" type="text" value="http://localhost"
                                                name="KRAKEN_CALLBACK_URL" />
                                        </div>

                                        <div id="control-settings-auth-helix-client-id" class="item-container"><label
                                                class="item-label">HELIX_CLIENT_ID</label><input class="item-input"
                                                type="password" value="lkjlklfvb9085klmndf9d78b908590ojkl"
                                                name="HELIX_CLIENT_ID" />
                                        </div>

                                        <div id="control-settings-auth-helix-secret" class="item-container"><label
                                                class="item-label">HELIX_SECRET</label><input class="item-input"
                                                type="password" value="lkjlklfvb9085klmndf9d78b908590ojkl"
                                                name="HELIX_SECRET" />
                                        </div>

                                        <div id="control-settings-auth-helix-callback-url" class="item-container"><label
                                                class="item-label">HELIX_CALLBACK_URL</label><input class="item-input"
                                                type="text" value="http://localhost" name="HELIX_CALLBACK_URL" />
                                        </div>
                                    </div>

                                    <div style="width: 100%;">
                                        <input id="control-settings-auth-save-button" type="submit" value="Save" />
                                        <span style="display: inline-block; width: 100%; text-align: right;">
                                            <label class="item-label">Chat Rooms:</label>
                                            <span style="margin-right: 30px;">
                                                <input id="control-settings-auth-chatrooms-join" type="text" value="" />
                                                <input type='button' value="Join" onclick="onJoin()" />
                                            </span>
                                            <span style="margin-left: 30px;">
                                                <select id="control-settings-auth-chatrooms-part"></select>
                                                <input type='button' value="Leave" onclick="onPart()" />
                                            </span>
                                        </span>
                                    </div>
                                </form>
                            </div>
                            <div id="tabs-control-settings-2">
                                <form id="control-settings-server-form">
                                    <div>Server Settings</div>
                                    <div id="control-settings-server-inputs">

                                        <div id="control-settings-server-irc-delay-ms" class="item-container"><label
                                                class="item-label">IRC_DELAY_MS</label><input class="item-input"
                                                type="text" value="50" name="IRC_DELAY_MS" />
                                        </div>

                                    </div>

                                    <div>
                                        <input id="control-settings-server-save-button" type="submit" value="Save" />
                                    </div>
                                </form>
                            </div>
                            <div id="tabs-control-settings-3">
                                <form id="control-settings-mysql-form">
                                    <div>Database Settings</div>
                                    <div id="control-settings-mysql-inputs">

                                        <div id="control-settings-mysql-connectionLimit" class="item-container"><label
                                                class="item-label">connectionLimit</label><input class="item-input"
                                                type="text" value="0" name="connectionLimit" />
                                        </div>
                                        <div id="control-settings-mysql-server" class="item-container"><label
                                                class="item-label">SERVER</label><input class="item-input"
                                                type="password" value="127.0.0.1" name="host" />
                                        </div>
                                        <div id="control-settings-mysql-username" class="item-container"><label
                                                class="item-label">USERNAME</label><input class="item-input"
                                                type="password" value="dbuser" name="user" />
                                        </div>
                                        <div id="control-settings-mysql-password" class="item-container"><label
                                                class="item-label">PASSWORD</label><input class="item-input"
                                                type="password" value="super5ecretpass" name="password" />
                                        </div>
                                        <div id="control-settings-mysql-database" class="item-container"><label
                                                class="item-label">DATABASE</label><input class="item-input"
                                                type="password" value="namedb" name="database" />
                                        </div>

                                    </div>

                                    <div>
                                        <input id="control-settings-database-save-button" type="submit" value="Save" />
                                    </div>
                                </form>
                            </div>
                            <div id="tabs-control-settings-4">
                                <form id="control-settings-access-levels-form">
                                    <div>Access Levels</div>
                                    <div id="control-settings-access-levels-inputs">

                                        <div id="settings-accordion">
                                            <div class="group">
                                                <h3 class="DontMove">NONE</h3>
                                                <div>
                                                    <p>User has no access to commands</p>
                                                    <textarea name="NONE" cols="40" rows="5"></textarea>
                                                </div>
                                            </div>
                                            <div class="group" style="display: none;">
                                                <h3 class="DontMove">CHAT</h3>
                                                <div>
                                                    <p>User is in the chat room, not a follower (Do Not Edit)</p>
                                                    <textarea name="CHAT" cols="40" rows="5"></textarea>
                                                </div>
                                            </div>
                                            <div class="group">
                                                <h3>FOLLOWER</h3>
                                                <div>
                                                    <p>User follows the channel and has access to follower level
                                                        commands
                                                    </p>
                                                    <textarea name="FOLLOWER" cols="40" rows="5"></textarea>
                                                </div>
                                            </div>
                                            <div class="group">
                                                <h3 class="DontMove">OWNER</h3>
                                                <div>
                                                    <p>User can use same commands as the owner</p>
                                                    <textarea name="OWNER" cols="40" rows="5"></textarea>
                                                </div>
                                            </div>
                                        </div>

                                    </div>

                                    <div>
                                    </div>

                                    <div style="width: 100%;">
                                        <input id="control-settings-access-levels-save-button" type="submit"
                                            value="Save" />
                                        <span style="display: inline-block; width: 100%; text-align: right;">
                                            <label class="item-label">Categories:</label>
                                            <span style="margin-right: 30px;">
                                                <input id="control-settings-access-levels-add" type="text" value="" />
                                                <input type='button' value="Add" onclick="onAccessLevelsAdd()" />
                                            </span>
                                            <span style="margin-left: 30px;">
                                                <select id="control-settings-access-levels-remove"></select>
                                                <input type='button' value="Remove" onclick="onAccessLevelsRemove()" />
                                            </span>
                                        </span>
                                    </div>
                                </form>
                            </div>
                            <div id="tabs-control-settings-5">
                                <div>EMPTY TAB Settings</div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="footer" style="height: 60px;">

            <div style="background-color: gray;">
                <div id="login-buttons-container2">
                    <input id="theme-change" type="button" value="Themes" />
                </div>
            </div>
        </div>
    </div>
    <!-- 
        Scripts Start Here 
    -->
    <script src="/socket.io/socket.io.js"></script>

    <script src="//code.jquery.com/jquery-1.12.4.js"></script>
    <script src="//code.jquery.com/ui/1.12.1/jquery-ui.js"></script>
    <script src="/js/server/get-boolean.js"></script>
    <script>
        "use strict";

        const socket = io.connect();
        const controls = new Map();
        const getBoolean = this['get-boolean'];

        const panels = {
            dashboard: {
                controls: {
                    jprofileimage: $('#control-dashboard-profile_image_url'),
                    jboxart: $('#control-dashboard-box_art_url'),
                    jtitle: $('#control-dashboard-title input'),
                    jgamename: $('#control-dashboard-game_name input')
                }
            },
            commands: {
                controls: {
                    jprefix: $('#control-commands-prefix input'),
                    jname: $('#control-commands-name input'),
                    jaccessLevel: $('#control-commands-accessLevel select'),
                    jcooldown: $('#control-commands-cooldown input'),
                    jexample: $('#control-commands-example input'),
                    jdescription: $('#control-commands-description input'),
                    jglobal_cooldown: $('#control-commands-global_cooldown input')
                }
            },
            subscription: {
                index: 0,
                total: 0,
                limit: 5,
                controls: {
                    jprevious: $('#control-subscription-previous-button'),
                    jnext: $('#control-subscription-next-button')
                }
            },
            settings: {
                auth: {
                    controls: {
                        jport: $('#control-settings-auth-port input'),
                        jchannelname: $('#control-settings-auth-channel-name input'),
                        jbotusername: $('#control-settings-auth-bot-username input'),
                        joauthtoken: $('#control-settings-auth-oauth-token input'),
                        jkrakenclientid: $('#control-settings-auth-kraken-client-id input'),
                        jkrakensecret: $('#control-settings-auth-kraken-secret input'),
                        jkrakencallbackurl: $('#control-settings-auth-kraken-callback-url input'),
                        jhelixclientid: $('#control-settings-auth-helix-client-id input'),
                        jhelixsecret: $('#control-settings-auth-helix-secret input'),
                        jhelixcallbackurl: $('#control-settings-auth-helix-callback-url input')
                    }
                },
                server: {
                    controls: {
                        jircdelay: $('#control-settings-server-irc-delay-ms input')
                    }
                },
                mysql: {
                    controls: {
                        jconnectionlimit: $('#control-settings-mysql-connectionLimit input'),
                        jserver: $('#control-settings-mysql-server input'),
                        jusername: $('#control-settings-mysql-username input'),
                        jpassword: $('#control-settings-mysql-password input'),
                        jdatabase: $('#control-settings-mysql-database input')
                    }
                },
                'access-levels': {
                    controls: {
                        jtextareas: $('#control-settings-access-levels-inputs textarea'),
                    }
                }
            }
        }

        //, display: (key) => {}
        const controlNames = [
            {
                name: 'control-dashboard',
                display: displayDashboard,
                info: (key) => { return { name: key } }
            },
            {
                name: 'control-commands',
                display: displayCommands,
                info: (key) => { return { name: key } }
            },
            {
                name: 'control-subscription',
                display: displaySubscription,
                info: (key) => { return { name: key, index: panels.subscription.index, limit: panels.subscription.limit } }
            },
            {
                name: 'control-settings',
                display: displaySettings,
                info: (key) => { return { name: key } }
            }
        ];

        socket.on('connect', () => {
            console.log("client connected to server");
        });
        socket.on("disconnect", () => {
            console.log("disconnected from server");
        });

        async function sendToServer(info) {
            return new Promise((resolve, reject) => {
                socket.emit(info.name, info, (data) => {
                    resolve(data);
                });
                setTimeout(reject, 1000);
            });
        }

        function toJson(data) {
            const urlParams = new URLSearchParams(data);
            const result = {};
            urlParams.forEach((v, k) => {
                result[k] = v;
            });
            return result;
        }

        function displayAny(key) {
            const data = gdata[key];
            const jdiv = controls.get(key).jdisplay;
            const content = data.result ? JSON.stringify(data.result) : key;
            jdiv.empty();
            jdiv.show();
            jdiv.append(content);
        }

        function displayDashboard(key) {
            const data = gdata[key];
            const jdiv = controls.get(key).jdisplay;
            jdiv.show();

            //jdiv.append(JSON.stringify(data.result));

            if (data.result.stream.success === true) {
                const box_art_url = data.result.stream.game.box_art_url.replace('{width}', 285).replace('{height}', 380);
                panels.dashboard.controls.jprofileimage.attr('src', data.result.user.profile_image_url);
                panels.dashboard.controls.jboxart.attr('src', box_art_url);
                panels.dashboard.controls.jtitle.val(data.result.stream.title);
                panels.dashboard.controls.jgamename.val(data.result.stream.game.name);
                panels.dashboard.controls.jtitle.parent().show();
                panels.dashboard.controls.jgamename.parent().show();
            } else if (data.result.user.success === true) {
                //1920x1080
                const box_art_scale = 0.15;
                const box_art_url = data.result.user.offline_image_url;
                panels.dashboard.controls.jprofileimage.attr('src', data.result.user.profile_image_url);
                panels.dashboard.controls.jboxart.attr('src', box_art_url);
                panels.dashboard.controls.jboxart.css({ width: 1920 * box_art_scale, height: 1080 * box_art_scale });
                panels.dashboard.controls.jtitle.parent().hide();
                panels.dashboard.controls.jgamename.parent().hide();
            } else {
                // no connections
            }
        }

        function displayCommands(key) {
            const data = gdata[key];
            const jdiv = controls.get(key).jdisplay;
            jdiv.show();

            const jul = jdiv.find('ul');
            jul.empty();
            for (const prefix in data.result.commands) {

                const items = data.result.commands[prefix]

                for (const item in items) {

                    if (items.hasOwnProperty(item)) {
                        const configs = items[item];
                        const jli = $(`<li class='clickable'>${configs.prefix} ${configs.name}</li>`);
                        jul.append(jli);

                        jli.click(() => {

                            for (const propname in panels.commands.controls) {

                                const jcontrol = panels.commands.controls[propname];

                                const parent = jcontrol.parent();
                                const inputname = jcontrol.attr('name');

                                if (inputname in items[item]) {
                                    parent.show();
                                    if (inputname === 'accessLevel') {
                                        jcontrol.empty();
                                        for (const ak in data.result.access) {
                                            if (data.result.access.hasOwnProperty(ak)) {
                                                const access = data.result.access[ak];
                                                const jopt = $('<option>', { value: access, text: access });
                                                jcontrol.append(jopt);
                                            }
                                        }
                                    }

                                    let val = items[item][inputname];
                                    if (typeof val === "boolean") {
                                        val = getBoolean.fromValue(val) ? true : false;
                                        jcontrol.prop('checked', val);
                                    } else {
                                        jcontrol.val(val);
                                    }
                                } else {
                                    parent.hide();
                                }
                            }
                        });
                    }
                }
            }

            $('#control-commands-form').submit((e) => {
                e.preventDefault();
                const sdata = $('#control-commands-form').serialize();

                const result = toJson(sdata);

                for (const pname in result) {
                    if (pname in data.result.commands[result.prefix][result.name]) {
                        data.result.commands[result.prefix][result.name][pname] = result[pname];
                    }
                }

                if(result['global_cooldown']) {
                    data.result.commands[result.prefix][result.name]['global_cooldown'] = true;
                } else {
                    data.result.commands[result.prefix][result.name]['global_cooldown'] = false;
                }
                
                socket.emit('control-commands-changed', data.result.commands[result.prefix][result.name]);
            });
        }

        function displaySubscription(key) {
            const data = gdata[key];
            const jdiv = controls.get(key).jdisplay;
            jdiv.show();

            const { result } = data.result;

            if (!result) {
                jdiv.append(JSON.stringify(data.result));
                jdiv.show();
                return;
            }
            panels.subscription.limit = data.limit;
            panels.subscription.total = Math.ceil(result._total / data.limit);
            if (panels.subscription.index > panels.subscription.total - 1) {
                panels.subscription.index = panels.subscription.total - 1;

                sendRequestToServerByKey(key);

                return;
            }

            const jul = $('#control-subscription-list');
            jul.empty();

            for (let i = 0; i < result.subscriptions.length; i++) {
                const subscription = result.subscriptions[i];
                const content = `
                <div style="display: flex; flex-direction: column; background-color: white;">
                    <div style="display: flex; flex: 3; width: 100%; margin: 2px;">
                        <div style="display: flex; width:150px; margin: 1px;">${subscription.user.display_name}</div>
                        <div style="display: flex; width:150px; margin: 1px;">${subscription.sub_plan}</div>
                        <div style="display: flex; width:200px; margin: 1px;">${new Date(subscription.created_at).toLocaleString()}</div>
                        <div style="display: flex; width:auto; margin: 1px;">${subscription.sub_plan_name}</div>
                    </div>
                </div>
                `;
                const jli = $(`<li class='clickable'>${content}</li>`);
                jul.append(jli);
            }
            //jdiv.append(JSON.stringify(result));
            $('#control-subscription-index').text(panels.subscription.index + 1);
            $('#control-subscription-total').text(panels.subscription.total);

            panels.subscription.controls.jprevious.prop("disabled", panels.subscription.index === 0);
            panels.subscription.controls.jnext.prop("disabled", panels.subscription.index === (panels.subscription.total - 1));
        }

        const gdata = {};
        const dontmove = ['NONE', 'OWNER'];// class = DontMove
        const dontshow = [];
        const dontremove = dontmove.concat(['CHAT']);
        const indices = {
            max: 0,
            start: 0,
            stop: 0
        };
        const makeGroup = (params) => `
            <div class="group">
                <h3 class="${params.class}">${params.name}</h3>
                <div>
                    <p>${params.description}</p>
                    <textarea name="${params.name}" cols="40" rows="5"></textarea>
                </div>
            </div>`;
        function displaySettings(key) {
            const data = gdata[key];
            const jdiv = controls.get(key).jdisplay;
            jdiv.show();

            for (const item in data.result) {
                if (data.result.hasOwnProperty(item)) {
                    if (item === 'access-levels') {

                        const jaccordion = $('#settings-accordion');
                        jaccordion.empty();

                        const keys = Object.keys(data.result[item]);
                        for (let i = 0; i < keys.length; i++) {

                            for (const name in data.result[item]) {
                                if (data.result[item].hasOwnProperty(name)) {
                                    if (data.result[item][name].priority !== i) continue;
                                    const accesses = data.result[item][name].names;
                                    const jcontent = $(makeGroup({
                                        name: name,
                                        class: dontmove.indexOf(name) !== -1 ? 'DontMove' : '',
                                        description: `Enter description here`
                                    }));
                                    if (dontshow.indexOf(name) !== -1) {
                                        jcontent.css({ display: 'none' });
                                    }
                                    const jtextarea = jcontent.find('textarea').empty();
                                    for (let i = 0; i < accesses.length; i++) {
                                        const access = accesses[i];
                                        jtextarea.append(`${access}\n`);
                                    }
                                    jaccordion.append(jcontent);
                                }
                            }
                        }

                        jaccordion.accordion("refresh");
                        /*const jtextareas = panels.settings[item].controls.jtextareas;

                        $.each(jtextareas, (k, value) => {
                            const name = value.name;
                            const accesses = data.result[item][name];
                            $(value).empty();
                            for (let i = 0; i < accesses.length; i++) {
                                const access = accesses[i];
                                $(value).append(`${access}\n`);
                            }
                        });*/
                    } else if (panels.settings[item]) {
                        for (const propname in panels.settings[item].controls) {

                            const jcontrol = panels.settings[item].controls[propname];

                            const parent = jcontrol.parent();
                            const inputname = jcontrol.attr('name');

                            if (inputname in data.result[item]) {
                                parent.show();
                                jcontrol.val(data.result[item][inputname]);
                            } else {
                                parent.hide();
                            }
                        }
                    }
                }
                $(`#control-settings-${item}-form`).submit((e) => {
                    e.preventDefault();
                    const sdata = $(`#control-settings-${item}-form`).serialize();

                    const result = toJson(sdata);

                    for (const name in result) {
                        if (data.result[item].hasOwnProperty(name)) {
                            const value = result[name];
                            data.result[item][name] = value;
                        }
                    }
                    const send_data = {};
                    send_data[item] = data.result[item];
                    socket.emit('control-settings-changed', send_data);
                });
            }
            // TODO: do each below on tab change
            getChatrooms();
            getAccessLevels();

        }

        function onJoin() {
            const jinput = $('#control-settings-auth-chatrooms-join');
            const channel = jinput.val();
            console.log("Join Attempt " + channel);
            socket.emit('join-chatroom', { channel: channel }, (data) => {
                jinput.val("");
                console.log("Joined " + data.channel);
                setTimeout(getChatrooms, 500);
                animateColorBG($('#control-settings-auth-chatrooms-part'), "#9e9");
            });
        }

        function onPart() {
            const joption = $('#control-settings-auth-chatrooms-part option:selected');
            const channel = joption.text();
            console.log("Part Attempt " + channel);
            socket.emit('part-chatroom', { channel: channel }, (data) => {
                console.log("Parted " + data.channel);
                setTimeout(getChatrooms, 500);
                animateColorBG($('#control-settings-auth-chatrooms-part'), "#e99");
            });
        }

        function onAccessLevelsAdd() {
            const jinput = $('#control-settings-access-levels-add');
            const name = jinput.val();
            console.log("Add Access Attempt " + name);
            socket.emit('access-levels', { action: 'add', name: name }, (access) => {
                jinput.val("");
                console.log("Added Access " + name);
                setTimeout(getAccessLevels, 500);
                animateColorBG($('#control-settings-access-levels-remove'), "#9e9");
                $(makeGroup({
                    name: name,
                    class: dontmove.indexOf(name) !== -1 ? 'DontMove' : '',
                    description: `Enter description here`
                })).insertBefore($('#settings-accordion .group').last());
                $("#settings-accordion").accordion("refresh");
            });
        }

        function onAccessLevelsRemove() {

            const joption = $('#control-settings-access-levels-remove option:selected');
            const name = joption.text();
            const value = joption.val();
            const nth = +value + 1;
            console.log("Remove Access Attempt " + name + "at value " + value);

            socket.emit('access-levels', { action: 'remove', name: name }, (access) => {
                console.log("Removed Access " + name);
                setTimeout(getAccessLevels, 500);
                animateColorBG($('#control-settings-access-levels-remove'), "#e99");
                $(`#settings-accordion .group:nth-child(${nth})`).remove();
                $("#settings-accordion").accordion("refresh");
            });
        }

        function getChatrooms() {
            socket.emit('chatroom-channels', {}, (channels) => {
                const jselect = $('#control-settings-auth-chatrooms-part');
                jselect.empty();
                for (let i = 0; i < channels.length; i++) {
                    const channel = channels[i];
                    jselect.append($('<option>', {
                        value: channel,
                        text: channel
                    }));
                }
            });
        }

        function getAccessLevels() {
            socket.emit('access-levels', {}, (access) => {
                const jselect = $('#control-settings-access-levels-remove');
                jselect.empty();
                for (const key in access) {
                    jselect.append($('<option>', {
                        value: access[key],
                        text: key
                    }).css({ 'background-color': dontremove.indexOf(key) !== -1 ? 'red' : 'white' }));
                }
            });
        }

        function animateColorBG(jselect, color) {
            jselect.animate({ 'background-color': color }, 1000)
                .animate({ 'background-color': "#fff" }, 1000);
        }

        function getKeyIndex(key) {
            for (let j = 0; j < controlNames.length; j++) {
                if (key === controlNames[j].name) {
                    return j;
                }
            }
            return 0;
        }

        function sendRequestToServerByKey(key) {
            sendRequestToServer(key, getKeyIndex(key));
        }

        function sendRequestToServer(key, keyIndex) {

            sendToServer(controlNames[keyIndex].info(key))
                .then((result) => {
                    gdata[result.name] = result;
                    controlNames[getKeyIndex(result.name)].display(result.name);
                })
                .catch((error) => {
                    controls.get(key).jdisplay.show();
                    controls.get(key).jdisplay.append("FAILED: " + error);
                });
        }

        function hideAllPanels() {
            for (let j = 0; j < controlNames.length; j++) {
                controls.get(controlNames[j].name).jdisplay.hide();
            }
        }
        let themeIndex = 0;

        function setThemeFromIndex(index) {
            const jbody = $('body');
            for (let i = 0; i < 3; i++) {
                jbody.removeClass(`theme${i + 1}`);
            }
            jbody.addClass(`theme${index + 1}`);
            $('#theme-change').val('Theme ' + (index + 1));
        }

        $(document).ready(() => {

            $("#tabs-control-settings").tabs();
            $("#settings-accordion").accordion({
                collapsible: true,
                active: false,
                heightStyle: "content",
                header: "> div > h3"
            })
                .sortable({
                    axis: "y",
                    handle: "h3",
                    cancel: ".DontMove",
                    start: function (event, ui) {
                        const data = gdata['control-settings'];
                        indices.start = ui.item.index();
                        indices.max = Object.keys(data.result['access-levels']).length - 1;
                    },
                    stop: function (event, ui) {
                        const data = gdata['control-settings'];
                        indices.stop = ui.item.index();
                        if (indices.stop === 0 || indices.stop === indices.max) {
                            indices.stop = indices.start;
                            $(this).sortable("cancel");
                        } else {

                            console.log(data.result['access-levels']);

                            const result = data.result['access-levels'];
                            const keys = Object.keys(result);
                            const startKey = keys.filter(x => {
                                return result[x].priority === indices.start;
                            })[0];
                            //const swapKey = keys.filter(x => {
                            //    return result[x].priority === indices.stop;
                            //})[0];
                            //data.result['access-levels'][startKey].priority = indices.stop;
                            //data.result['access-levels'][swapKey].priority = indices.start;

                            if (indices.start > indices.stop) {
                                for (let i = indices.start - 1; i >= indices.stop; i--) {
                                    const currentKey = keys.filter(x => {
                                        return result[x].priority === i;
                                    }).map(x => {
                                        data.result['access-levels'][x].priority++;
                                    });
                                }
                            } else {
                                for (let i = indices.start + 1; i <= indices.stop; i++) {
                                    const currentKey = keys.filter(x => {
                                        return result[x].priority === i;
                                    }).map(x => {
                                        data.result['access-levels'][x].priority--;
                                    });
                                }
                            }
                            data.result['access-levels'][startKey].priority = indices.stop;

                            const send_data = {};
                            send_data['access-levels'] = data.result['access-levels'];
                            console.log(data.result['access-levels']);
                            socket.emit('control-settings-changed', send_data);
                        }
                        // IE doesn't register the blur when sorting
                        // so trigger focusout handlers to remove .ui-state-focus
                        ui.item.children("h3").triggerHandler("focusout");

                        // Refresh accordion to handle new order
                        $(this).accordion("refresh");

                        getAccessLevels();
                    }
                });

            $('#theme-change').click(() => {
                themeIndex = (themeIndex + 1) % 3;
                setThemeFromIndex(themeIndex);
            });

            $('#control-dashboard-login-kraken').click((e) => {
                window.location = `./login-kraken`;
            });
            $('#control-subscription-login-kraken').click((e) => {
                window.location = `./login-kraken`;
            });
            $('#control-dashboard-login-helix').click((e) => {
                window.location = `./login-helix`;
            });
            socket.on('login-kraken', (data) => {
                console.log(data);
                if (data.authenticated) {
                    $('#control-dashboard-login-kraken').hide();
                    $('#control-subscription-login-kraken').hide();
                }
            });
            socket.on('login-helix', (data) => {
                console.log(data);
                if (data.authenticated) {
                    $('#control-dashboard-login-helix').hide();
                }
            });

            const reloadCommandsPanel = (data) => {
                const key = 'control-commands';
                if (controls.get(key).jdisplay.css('display') !== 'none') {
                    sendRequestToServerByKey(key);
                }
            };
            socket.on('delete-command', reloadCommandsPanel);
            socket.on('create-command', reloadCommandsPanel);

            for (let index = 0; index < controlNames.length; index++) {
                const key = controlNames[index].name;
                controls.set(key, {
                    jmenu: $(`#${key}`),
                    jdisplay: $(`#display-${key}`)
                });

                if (index > 0) {
                    controls.get(key).jdisplay.hide();
                }
            }

            // Subscription
            const jselector = $('#control-subscription-select');
            jselector.change(() => {
                const index = jselector[0].selectedIndex;
                const value = +jselector[0].value;
                panels.subscription.limit = value;

                const key = 'control-subscription';
                sendRequestToServerByKey(key);
            });
            panels.subscription.controls.jprevious.click(() => {
                panels.subscription.index--;
                if (panels.subscription.index < 0) panels.subscription.index = 0;

                const key = 'control-subscription';
                sendRequestToServerByKey(key);
            });
            panels.subscription.controls.jnext.click(() => {
                panels.subscription.index++;
                if (panels.subscription.index > panels.subscription.total - 1) panels.subscription.index = panels.subscription.total - 1;

                const key = 'control-subscription';
                sendRequestToServerByKey(key);
            });

            $("#selectable-menu").selectable({
                selected: function (event, ui) {
                    const key = $(ui.selected).attr('id');
                    console.log(key);
                    hideAllPanels();
                    sendRequestToServerByKey(key);
                }
            });

            hideAllPanels();
            setTimeout(() => {
                const key = 'control-dashboard';
                sendRequestToServerByKey(key);
                setThemeFromIndex(themeIndex);
            }, 1000);

            const jpasswords = $(':password');
            let passwordToggle = true;
            $('#show-all-passwords').click(() => {
                if (passwordToggle === true) {
                    if (confirm('Are you sure you want to show all password fields as text')) {
                        passwordToggle = !passwordToggle;
                    }
                } else {
                    passwordToggle = true;
                }
                jpasswords.attr('type', passwordToggle ? 'password' : 'text');
            });
        });
    </script>
</body>